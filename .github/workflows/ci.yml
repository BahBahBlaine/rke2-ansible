---
name: CI

on:
  pull_request:
  push:
  workflow_dispatch:

jobs:

  lint-test:
    name: Lint
    runs-on: ubuntu-latest

    steps:
      - name: Check out the codebase.
        uses: actions/checkout@v2

      - name: Set up Python 3.7.
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Install test dependencies.
        run: pip3 install yamllint ansible-lint ansible

      - name: Version check
        run: |
          ansible --version
          ansible-lint --version
          yamllint --version

      - name: Run yamllint.
        run: yamllint .

      - name: Run ansible-lint.
        run: ansible-lint

  ubuntu20-test:
    name: Initial build test
    runs-on: ubuntu-latest

    steps:
      - name: Check out the codebase.
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        id: creds
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-gov-west-1

      - name: Terraform Init
        id: init
        run: |
          cd testing/
          terraform init

      - run: 'echo "$SSH_KEY" > .key'
        shell: bash
        env:
          SSH_KEY: ${{secrets.SSH_PRIVATE_KEY}}

      - run: chmod 400 .key

      - name: Terraform private key
        run: cp .key testing/.key

      - name: Terraform Validate
        id: validate
        run: |
          cd testing/
          terraform validate -no-color

      - name: Terraform Plan
        id: plan
        run: |
          cd testing/
          terraform plan -var "GITHUB_RUN_ID=$GITHUB_RUN_ID" -no-color
        continue-on-error: true

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        run: |
          cd testing/
          terraform apply  -var "GITHUB_RUN_ID=$GITHUB_RUN_ID" -auto-approve

      - name: Set up Python
        id: setup_python
        uses: actions/setup-python@v2
        with:
          python-version: 3.9

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ansible-core "ansible-lint[yamllint]"

      - name: Create inventory hosts.ini
        run: |
          touch hosts.ini
          echo "[rke2_servers]" > hosts.ini
          aws ec2 describe-instances --filters "Name=tag:Owner,Values=rke2-ansible-github-actions" "Name=tag:NodeType,Values=Server" "Name=tag:github_run,Values=$GITHUB_RUN_ID" --query "Reservations[*].Instances[*].PublicIpAddress" --output text >> hosts.ini
          echo "[rke2_agents]" >> hosts.ini
          aws ec2 describe-instances --filters "Name=tag:Owner,Values=rke2-ansible-github-actions" "Name=tag:NodeType,Values=Agent" "Name=tag:github_run,Values=$GITHUB_RUN_ID" --query "Reservations[*].Instances[*].PublicIpAddress" --output text >> hosts.ini
          echo >> hosts.ini
          echo >> hosts.ini
          echo "[all:vars]"
          echo "ansible_ssh_user=ubuntu"
          echo "ansible_ssh_private_key_file=.key"

      - name: Check hosts.ini
        run: cat hosts.ini

      - name: Prep inventory
        run: |
          cp -R inventory/sample inventory/ubuntu20
          cp hosts.ini inventory/ubuntu20/hosts.ini

      - name: Run playbook
        run: |
          ANSIBLE_HOST_KEY_CHECKING=False ansible-playbook -i inventory/ubuntu20/hosts.ini --verbose --private-key .key site.yml

      - name: Delete Stack
        if: ${{ always() }}
        run: |
          cd testing/
          terraform destroy -var "GITHUB_RUN_ID=$GITHUB_RUN_ID" -auto-approve
